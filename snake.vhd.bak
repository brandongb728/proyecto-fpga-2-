LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.NUMERIC_STD.ALL; 
USE IEEE.STD_LOGIC_ARITH.ALL;

ENTITY snake IS 
PORT (
	clk : IN STD_LOGIC;
	rst : IN STD_LOGIC;
	VGA_HS, VGA_VS	: OUT STD_LOGIC;
	VGA_Rojo  : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
	VGA_Verde : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
	VGA_Azul  : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
	DISPLAY_A : OUT STD_LOGIC_VECTOR(6 DOWNTO 0);
	DISPLAY_B : OUT STD_LOGIC_VECTOR(6 DOWNTO 0);
	Fila0    : IN  STD_LOGIC;
   Fila1    : IN  STD_LOGIC;
   Fila2    : IN  STD_LOGIC;
   Fila3    : IN  STD_LOGIC;
   Columna0 : OUT STD_LOGIC;
   Columna1 : OUT STD_LOGIC;
   Columna2 : OUT STD_LOGIC;
	Fila0_2  : IN  STD_LOGIC;
   Fila1_2  : IN  STD_LOGIC;
   Fila2_2  : IN  STD_LOGIC;
   Fila3_2  : IN  STD_LOGIC;
   Columna0_2 : OUT STD_LOGIC;
   Columna1_2 : OUT STD_LOGIC;
   Columna2_2 : OUT STD_LOGIC
);
END ENTITY;


ARCHITECTURE behaviour OF pong IS

SIGNAL clk_vga : STD_LOGIC:='0'; 
SIGNAL reset : STD_LOGIC:='0'; 
SIGNAL nuevo_frame : STD_LOGIC:='0';
SIGNAL iniciar_rojo, iniciar_verde, iniciar_azul : STD_LOGIC_VECTOR(3 DOWNTO 0):= (OTHERS => '0');
SIGNAL posicion_horizontal : INTEGER RANGE 0 TO 2256:=0;
SIGNAL posicion_vertical : INTEGER RANGE 0 TO 1087:=0;
SIGNAL jugador1_puntos : INTEGER RANGE 0 TO 10:=0;
SIGNAL jugador2_puntos : INTEGER RANGE 0 TO 10:=0;
SIGNAL Num, Num_2 : STD_LOGIC_VECTOR(3 DOWNTO 0);
SIGNAL jugador1, jugador2 : STD_LOGIC_VECTOR(1 DOWNTO 0);

BEGIN
	reset <= NOT rst;

	botones_1 : PROCESS (Num) 
   BEGIN 
	 IF(Num = "0100") THEN
	    jugador1(0) <= '0';
	 ELSE
	    jugador1(0) <= '1';
	 END IF; 
	 
	 IF(Num = "0110") THEN
	    jugador1(1) <= '0';
	 ELSE
	    jugador1(1) <= '1';
	 END IF; 
  END PROCESS;
  
  botones_2 : PROCESS (Num_2) 
   BEGIN 
	 IF(Num_2 = "0100") THEN
	    jugador2(0) <= '0';
	 ELSE
	    jugador2(0) <= '1';
	 END IF; 
	 
	 IF(Num_2 = "0110") THEN
	    jugador2(1) <= '0';
	 ELSE
	    jugador2(1) <= '1';
	 END IF; 
  END PROCESS;
  
pll_clock : ENTITY WORK.pll 
	PORT MAP (
	   areset => reset,
		c0 => clk_vga,
		inclk0 => clk); 
  
jugador1_puntos_display : ENTITY WORK.Display 
	PORT MAP (
	   numero => jugador1_puntos, 
	   SEG7   => DISPLAY_A);
  
jugador2_puntos_display : ENTITY WORK.Display 
	PORT MAP (
	   numero => jugador2_puntos, 
	   SEG7   => DISPLAY_B);
	
vga1 : ENTITY WORK.configuracion_vga 
	PORT MAP (
		clk	 => clk_vga,
		h_syn  => VGA_HS,
		v_syn  => VGA_VS,
		rojo	 => VGA_Rojo,
		verde	 => VGA_Verde,
		azul	 => VGA_Azul,
		nuevo_frame => nuevo_frame,
		horizontal_actual => posicion_horizontal,
		vertical_actual => posicion_vertical,
		rojo_in	 => iniciar_rojo,
		verde_in  => iniciar_verde,
		azul_in	 => iniciar_azul);
 
dibujado_vga : ENTITY WORK.dibujado 
	PORT MAP (
		clk_vga => clk_vga,
		reset  => reset,
		nuevo_frame  => nuevo_frame,
		jugador1	 => jugador1,
		jugador2	 => jugador2,
		posicion_horizontal	 => posicion_horizontal,
		posicion_vertical => posicion_vertical,
		puntos_jugador1 => jugador1_puntos,
		puntos_jugador2 => jugador2_puntos,
		rojo	 => iniciar_rojo,
		verde  => iniciar_verde,
		azul	 => iniciar_azul);
 
 player1: ENTITY WORK.teclas
				  PORT MAP (clk       => clk,
								rst       => reset,
								Fila0     => Fila0,
								Fila1     => Fila1,
								Fila2     => Fila2,
								Fila3     => Fila3,
								Num       => Num,
								Columna0  => Columna0,
								Columna1  => Columna1,
								Columna2  => Columna2);
								
 player2: ENTITY WORK.teclas
				  PORT MAP (clk       => clk,
								rst       => reset,
								Fila0     => Fila0_2,
								Fila1     => Fila1_2,
								Fila2     => Fila2_2,
								Fila3     => Fila3_2,
								Num       => Num_2,
								Columna0  => Columna0_2,
								Columna1  => Columna1_2,
								Columna2  => Columna2_2);

END ARCHITECTURE;